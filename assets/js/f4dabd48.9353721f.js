"use strict";(self.webpackChunkexamples_classic=self.webpackChunkexamples_classic||[]).push([[331],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),f=l(n),u=r,b=f["".concat(c,".").concat(u)]||f[u]||p[u]||s;return n?a.createElement(b,o(o({ref:t},d),{},{components:n})):a.createElement(b,o({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=f;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},6248:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const s={},o="back-backend",i={unversionedId:"backend/back-backend",id:"backend/back-backend",isDocsHomePage:!1,title:"back-backend",description:"This part his the node-red  REST API",source:"@site/docs/backend/back-backend.md",sourceDirName:"backend",slug:"/backend/back-backend",permalink:"/wimp-wiki/docs/backend/back-backend",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/backend/back-backend.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Frontend",permalink:"/wimp-wiki/docs/frontend/frontend"},next:{title:"front-backend",permalink:"/wimp-wiki/docs/backend/front-backend"}},c=[],l={toc:c};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"back-backend"},"back-backend"),(0,r.kt)("p",null,"This part his the node-red <-> REST API "),(0,r.kt)("p",null,"Each time a student wants to access the status of his teachers, the frontend server sends a request to the express api.\nExpress. Express will check this request and then interogate node-red with a GET in order to notify the different states of the professor. Finally Express will transform the raw information received by node-red (as 'int', for example) and return clean information (as 'not available')."),(0,r.kt)("h1",{id:"recieve-request"},"Recieve request"),(0,r.kt)("p",null,"All the API routes are in the /modules/aiRouter.js"),(0,r.kt)("p",null,"The front end webserver call a GET on /states to get the states\nand a first ip verification is done to make sure that the request comes from an authorized web server."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"    apiRouter.get('/states', ipfilter(authorizedIPs, ipfilterConfig)...\n")),(0,r.kt)("p",null,"The program will browse the entire database where the teachers are stored.\nIt will create a profile for each teacher containing the information that will be sent as a response. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'...\nconst db_staff = new JSONdb(\'./database/staff.json\');\n    let staff = {};\n    let states = [];\n    try{\n        staff = db_staff.JSON();\n        Object.keys(staff).forEach(e => {\n            const person = staff[e];\n            let state = {\n                id: e,\n                pp: "",\n                firstNameRaw: person.firstName,\n                firstName: "",\n                lastName: person.lastName,\n                building: person.building,\n                department: person.department,\n                office: person.office,\n                statusColor: "",\n                statusMsg: "",\n                defaultMsg: "",\n                currentState: "",\n                visibility: {}\n            }\n    ...\n')),(0,r.kt)("p",null,"Finally, the program will fill in the relevant fields through a series of processes and then store the profile in a list that will be sent as a response."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'//try{\n    ...\n        // Find if the person is in the database\n        if (fs.existsSync(path.resolve(\'./pp/\' + person.pp))) {\n            state.pp = e;\n        } else {\n            state.pp = "undefined";\n        }\n\n        // Reduce first name\n        if(person.firstName.includes(" ")){\n            fn = person.firstName.split(\' \')\n            fn = fn.reduce((a,aa)=>{return (  a + "." + aa[0]) },"");\n            state.firstName = fn.slice(1);\n        } else {\n            state.firstName = person.firstName;\n        }\n\n        if (person.tracking === "OFF") {\n            state.statusColor = "grey";\n            state.statusMsg = "Disconnected";\n        } else {\n            // Find if the current state is defined\n            const db_data = new JSONdb(path.resolve(\'./database/db.json\'));\n            let currentState = "undefined";\n            if (db_data.has(e)){\n                currentState = db_data.get(e);\n            }\n            state.currentState = currentState;\n            \n            // Find the color & msg of the state\n            if(currentState !== "undefined"){\n                state.visibility = person.states[currentState].visibility;\n                state.statusColor = person.states[currentState].color;\n                state.statusMsg = person.states[currentState].msg;\n                switch (state.statusColor) {\n                    case "green":\n                        state.defaultMsg = person.default.available;\n                        break;\n                    case "orange":\n                        state.defaultMsg = person.default.busy;\n                        break;\n                    case "red":\n                        state.defaultMsg = person.default.unavailable;\n                        break;\n                }\n            }\n            else {\n                state.statusColor = "grey";\n                state.statusMsg = "undefined";\n            }\n        }\n        states.push(state);\n    })\n}\ncatch (e){\n    console.log(e);   \n}\nres.send(states).status(200);\n')))}d.isMDXComponent=!0}}]);